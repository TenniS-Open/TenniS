# Build TenniS

stages:
  - build
  - test
  
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  THREADS: '4'
  
  
.only_config:
  only: &only_config
    - /^r\d+\.\d+\W?/
    - api
    - schedules
    - triggers
    - web
    - ci
    - main
    - master

.common_artifacts: &common_artifacts_config
  name: '${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}'
  paths:
    - '${CI_PROJECT_NAME}-${CI_JOB_NAME}/'
  # defualt is 1 month
  expire_in: '1 month'

.shell_artifacts_version: &shell_artifacts_version
  - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME}
  - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
  - 'echo [Version] > $ARTIFACTS/version.txt'
  - 'echo date: `date "+%A %Y-%m-%d %H:%M:%S %Z"` >> $ARTIFACTS/version.txt'
  - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
  - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
  - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
  - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
  - git log -n 32 --pretty=format:"%h [%ai] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
  - cat $ARTIFACTS/version.txt

.pwsh_artifacts_version: &pwsh_artifacts_version
  - $ARTIFACTS = (pwd).Path + "\${CI_PROJECT_NAME}-${CI_JOB_NAME}"
  - if (![io.Directory]::Exists("$ARTIFACTS")) { mkdir "$ARTIFACTS" > $null; }
  - 'Write-Output "[Version]" > $ARTIFACTS\version.txt'
  - 'Write-Output "date: $(Get-Date -Format `"yyyy-MM-dd HH:mm:ss z`")" >> $ARTIFACTS/version.txt'
  - 'Write-Output "ref: $CI_COMMIT_REF_NAME" >> $ARTIFACTS/version.txt'
  - 'Write-Output "tag: $CI_COMMIT_TAG" >> $ARTIFACTS/version.txt'
  - 'Write-Output "reversion: $CI_COMMIT_SHA" >> $ARTIFACTS/version.txt'
  - 'Write-Output "[Recent Log]"  >> $ARTIFACTS/version.txt'
  - git log -n 32 --pretty=format:"%h [%ai] %s" | findstr -v "Merge" | select -first 16 >> $ARTIFACTS/version.txt
  - Get-Content $ARTIFACTS/version.txt

.ubuntu_before_script:
  before_script: &ubuntu_before_script
    - export DEBIAN_FRONTEND=noninteractive
    - export TZ=Asia/Shanghai
    - sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list
    - (apt update || echo "[WARNNING] Some thing wrong, but ignored!")
    - apt-get install -y git cmake gcc g++
    # plot information of project.
    - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date "+%A %Y-%m-%d %H:%M:%S %Z"` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt
    
.centos7_before_script:
  before_script: &centos7_before_script
    - curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
    - (yum makecache || echo "[WARNNING] Some thing wrong, but ignored!")
    - yum install -y git cmake make gcc gcc-c++
    # plot information of project.
    - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date "+%A %Y-%m-%d %H:%M:%S %Z"` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt
    
.centos8_before_script:
  before_script: &centos8_before_script
    - curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo
    # - sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo
    - (yum makecache || echo "[WARNNING] Some thing wrong, but ignored!")
    - yum install -y git cmake make gcc gcc-c++ libarchive
    # plot information of project.
    - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date "+%A %Y-%m-%d %H:%M:%S %Z"` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt

.android_before_script:
  before_script: &android_before_script
    - export DEBIAN_FRONTEND=noninteractive
    - export TZ=Asia/Shanghai
    - sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list
    - (apt update || echo "[WARNNING] Some thing wrong, but ignored!")
    - apt-get install -y git cmake wget unzip libncurses5
    - export ANDROID_NDK_VERSION=r23b
    - export ANDROID_NDK_HOST=linux
    - export ANDROID_NDK_ARCH=x86_64
    - export ANDROID_NDK_ZIP=android-ndk-$ANDROID_NDK_VERSION-$ANDROID_NDK_HOST.zip
    - export ANDROID_NDK=`pwd`/android-ndk/android-ndk-$ANDROID_NDK_VERSION
    - if [ ! -d android-ndk ]; then mkdir android-ndk; fi
    - pushd android-ndk
    - if [ ! -f $ANDROID_NDK_ZIP ]; then wget https://dl.google.com/android/repository/$ANDROID_NDK_ZIP; fi
    - unzip -q $ANDROID_NDK_ZIP
    - popd
    # plot information of project.
    - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date "+%A %Y-%m-%d %H:%M:%S %Z"` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt

  cache: &android_cache_config
    paths:
      - android-ndk/*.zip

.linux_build_config:
  script: &linux_build_script_config
    - cmake --version
    - mkdir build
    - cd build
    - cmake .. -DTS_DYNAMIC_INSTRUCTION=ON -DCMAKE_INSTALL_PREFIX=$ARTIFACTS -DCMAKE_BUILD_TYPE=Release
    # - export THREADS=`cat /proc/cpuinfo | grep processor| wc -l`
    - cmake --build . --target install -- -j $THREADS

  artifacts: &linux_artifacts_config
    <<: *common_artifacts_config
    
.linux_test_config:
  script: &linux_test_script_config
    - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME%_*}
    - echo $ARTIFACTS
    - ls -l
    - cd $ARTIFACTS
    - ls -l

    
.linux_build_cuda_config:
  script: &linux_build_cuda_script_config
    - cmake --version
    - mkdir build
    - cd build
    - cmake .. -DTS_DYNAMIC_INSTRUCTION=ON -DTS_USE_CUDA=ON -DTS_USE_CUBLAS=ON -DCMAKE_INSTALL_PREFIX=$ARTIFACTS -DCMAKE_BUILD_TYPE=Release
    # - export THREADS=`cat /proc/cpuinfo | grep processor| wc -l`
    - cmake --build . --target tennis_LIB -- -j $THREADS
    - cmake --build . --target tennis_haswell_LIB -- -j $THREADS
    - cmake --build . --target tennis_sandy_bridge_LIB -- -j $THREADS
    - cmake --build . --target tennis_pentium_LIB -- -j $THREADS
    - cmake --build . --target install -- -j $THREADS
    

.mingw_before_script:
  before_script: &mingw_before_script
    - export DEBIAN_FRONTEND=noninteractive
    - export TZ=Asia/Shanghai
    # Using default ubuntu repo. Aliyun is unstable to download mingw-w64
    # - sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list
    # Try tuna repo.
    - (apt update || echo "[WARNNING] Some thing wrong, but ignored!")
    - apt-get install -y git cmake mingw-w64
    # plot information of project.
    - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date "+%A %Y-%m-%d %H:%M:%S %Z"` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt

    
.mingw-x86_64_build_config:
  script: &mingw-x86_64_build_script_config
    # Config
    - export ARCH=x86_64  # or i686
    - export VERSION=9.3  # Notice that GCC is assumed version 9.3 in Ubuntu20.04.
    # Start compile
    - cmake --version
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=../toolchain/MinGW-$ARCH.cmake -DTS_DYNAMIC_INSTRUCTION=ON -DCMAKE_INSTALL_PREFIX=$ARTIFACTS -DCMAKE_BUILD_TYPE=Release
    # - export THREADS=`cat /proc/cpuinfo | grep processor| wc -l`
    - cmake --build . --target install -- -j $THREADS
    # Copy ref DLLs to artifacts.
    - if [ ! -d "$ARTIFACTS/bin" ]; then mkdir "$ARTIFACTS/bin"; fi
    - cp /usr/$ARCH-w64-mingw32/lib/libwinpthread-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libgcc_s_seh-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libgomp-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libstdc++-6.dll $ARTIFACTS/bin
    # Add tips to tell how to use packaged files.
    - 'echo [Notice] > $ARTIFACTS/notice.txt'
    - 'echo Please use the DLLs in this package to replace the same name DLLs in your own environment 
       or put them in the working directory to prevent symbols conflict. > $ARTIFACTS/notice.txt'
    # export lib for MSVC usage.
    - $ARCH-w64-mingw32-dlltool $ARTIFACTS/bin/libtennis.dll --export-all-symbols --output-def $ARTIFACTS/lib/libtennis.def.tmp
    - echo "; $ARCH-w64-mingw32-dlltool libtennis.dll --export-all-symbols --output-def libtennis.def" > $ARTIFACTS/lib/libtennis.def
    - echo "EXPORTS" >> $ARTIFACTS/lib/libtennis.def
    - cat $ARTIFACTS/lib/libtennis.def.tmp | grep '^\s*ts_' >> $ARTIFACTS/lib/libtennis.def
    - $ARCH-w64-mingw32-dlltool -D $ARTIFACTS/bin/libtennis.dll -d $ARTIFACTS/lib/libtennis.def -l $ARTIFACTS/lib/libtennis.lib -v

    
.mingw-i686_build_config:
  script: &mingw-i686_build_script_config
    # Config
    - export ARCH=i686  # or x86_64
    - export VERSION=9.3  # Notice that GCC is assumed version 9.3 in Ubuntu20.04.
    # Start compile
    - cmake --version
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=../toolchain/MinGW-$ARCH.cmake -DTS_DYNAMIC_INSTRUCTION=ON -DCMAKE_INSTALL_PREFIX=$ARTIFACTS -DCMAKE_BUILD_TYPE=Release
    # - export THREADS=`cat /proc/cpuinfo | grep processor| wc -l`
    - cmake --build . --target install -- -j $THREADS
    # Copy ref DLLs to artifacts. Notice that GCC is assumed version 9.3 in Ubuntu20.04.
    - if [ ! -d "$ARTIFACTS/bin" ]; then mkdir "$ARTIFACTS/bin"; fi
    - cp /usr/$ARCH-w64-mingw32/lib/libwinpthread-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libgcc_s_sjlj-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libgomp-1.dll $ARTIFACTS/bin
    - cp /usr/lib/gcc/$ARCH-w64-mingw32/$VERSION-posix/libstdc++-6.dll $ARTIFACTS/bin
    # Add tips to tell how to use packaged files.
    - 'echo [Notice] > $ARTIFACTS/notice.txt'
    - 'echo Please use the DLLs in this package to replace the same name DLLs in your own environment 
       or put them in the working directory to prevent symbols conflict. > $ARTIFACTS/notice.txt'
    # export lib for MSVC usage.
    - $ARCH-w64-mingw32-dlltool $ARTIFACTS/bin/libtennis.dll --export-all-symbols --output-def $ARTIFACTS/lib/libtennis.def.tmp
    - echo "; $ARCH-w64-mingw32-dlltool libtennis.dll --export-all-symbols --output-def libtennis.def" > $ARTIFACTS/lib/libtennis.def
    - echo "EXPORTS" >> $ARTIFACTS/lib/libtennis.def
    - cat $ARTIFACTS/lib/libtennis.def.tmp | grep '^\s*ts_' >> $ARTIFACTS/lib/libtennis.def
    - $ARCH-w64-mingw32-dlltool -D $ARTIFACTS/bin/libtennis.dll -d $ARTIFACTS/lib/libtennis.def -l $ARTIFACTS/lib/libtennis.lib -v

.android19_build_config:
  script: &android19_build_script_config
    - cmake --version
    - export ANDROID_PLATFORM=19
    - mkdir build_armv7
    - pushd build_armv7
    - 'cmake .. -DCMAKE_INSTALL_PREFIX=$ARTIFACTS 
       -DCMAKE_BUILD_TYPE=Release 
       -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake 
       -DANDROID_ABI="armeabi-v7a" 
       -DANDROID_PLATFORM=android-$ANDROID_PLATFORM 
       -DANDROID_STL=c++_static 
       -DANDROID_ARM_NEON=ON 
       -DPLATFORM="armeabi-v7a" 
       -DTS_USE_NEON=ON 
       -DTS_USE_FAST_MATH=ON 
       -DTS_ON_ARM=ON 
       -DTS_ON_ARMV7=ON'
    - cmake --build . --target install -- -j $THREADS
    - popd
    - mkdir build_armv8
    - pushd build_armv8
    - 'cmake .. -DCMAKE_INSTALL_PREFIX=$ARTIFACTS 
       -DCMAKE_BUILD_TYPE=Release 
       -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake 
       -DANDROID_ABI="arm64-v8a" 
       -DANDROID_PLATFORM=android-$ANDROID_PLATFORM 
       -DANDROID_STL=c++_static 
       -DANDROID_ARM_NEON=ON 
       -DPLATFORM="arm64-v8a" 
       -DTS_USE_NEON=ON 
       -DTS_USE_FAST_MATH=ON 
       -DTS_ON_ARM=ON'
    - cmake --build . --target install -- -j $THREADS
    - popd
    - mkdir build_x86
    - pushd build_x86
    - 'cmake .. -DCMAKE_INSTALL_PREFIX=$ARTIFACTS 
       -DCMAKE_BUILD_TYPE=Release 
       -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake 
       -DANDROID_ABI="x86" 
       -DANDROID_PLATFORM=android-$ANDROID_PLATFORM 
       -DANDROID_STL=c++_static 
       -DPLATFORM="x86" 
       -DTS_ON_PENTIUM=ON'
    - cmake --build . --target install -- -j $THREADS
    - popd
    - mkdir build_x64
    - pushd build_x64
    - 'cmake .. -DCMAKE_INSTALL_PREFIX=$ARTIFACTS 
       -DCMAKE_BUILD_TYPE=Release 
       -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake 
       -DANDROID_ABI="x86_64" 
       -DANDROID_PLATFORM=android-$ANDROID_PLATFORM 
       -DANDROID_STL=c++_static 
       -DPLATFORM="x86_64" 
       -DTS_ON_PENTIUM=ON'
    - cmake --build . --target install -- -j $THREADS
    - popd

.darwin_before_script:
  before_script: &darwin_before_script
    # plot information of project.
    - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date "+%A %Y-%m-%d %H:%M:%S %Z"` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - 'echo [System]  >> $ARTIFACTS/version.txt'
    - sw_vers >> $ARTIFACTS/version.txt
    - 'echo [Xcode]  >> $ARTIFACTS/version.txt'
    - xcodebuild -version >> $ARTIFACTS/version.txt
    - 'echo [CC]  >> $ARTIFACTS/version.txt'
    - cc --version >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt

.darwin_build_config:
  script: &darwin_build_script_config
    - cmake --version
    - mkdir build
    - cd build
    - cmake .. -DTS_DYNAMIC_INSTRUCTION=ON -DCMAKE_INSTALL_PREFIX=$ARTIFACTS -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --target install -- -j $THREADS

.ios9_build_config:
  script: &ios9_build_script_config
    - export TARGET=9
    - export ENABLE_BITCODE=0
    # PLATFORM could be, OS SIMULATOR64
    - export PLATFORM=OS
    # ARCH armv7 armv7s arm64 i386 x86_64
    - export ARCH="armv7;armv7s;arm64"
    - cmake --version
    - mkdir build
    - cd build
    - 'cmake .. -DCMAKE_TOOLCHAIN_FILE=../toolchain/iOS.cmake -DCMAKE_INSTALL_PREFIX=$ARTIFACTS
      -DCMAKE_BUILD_TYPE=Release 
      -DTS_USE_OPENMP=OFF
      -DTS_USE_SIMD=ON
      -DTS_USE_CBLAS=ON
      -DTS_USE_NEON=ON
      -DIOS_DEPLOYMENT_TARGET=$TARGET
      -DIOS_PLATFORM=$PLATFORM
      -DENABLE_BITCODE=$ENABLE_BITCODE
      -DIOS_ARCH="$ARCH"
      '
    - cmake --build . --target install -- -j $THREADS


.windows_setup_vs2019_x64:
  before_script: &windows_setup_vs2019_x64
    - '&script\pwsh\setup_vcvars.ps1 vs2019 x64'

.windows_setup_vs2019_x86:
  before_script: &windows_setup_vs2019_x86
    - '&script\pwsh\setup_vcvars.ps1 vs2019 x86'

.windows_setup_vs2017_x64:
  before_script: &windows_setup_vs2017_x64
    - '&script\pwsh\setup_vcvars.ps1 vs2017 x64'

.windows_setup_vs2017_x86:
  before_script: &windows_setup_vs2017_x86
    - '&script\pwsh\setup_vcvars.ps1 vs2017 x86'

.windows_setup_vs2015_x64:
  before_script: &windows_setup_vs2015_x64
    - '&script\pwsh\setup_vcvars.ps1 vs2015 x64'

.windows_setup_vs2015_x86:
  before_script: &windows_setup_vs2015_x86
    - '&script\pwsh\setup_vcvars.ps1 vs2015 x86'

.windows_setup_vs2013_x64:
  before_script: &windows_setup_vs2013_x64
    - '&script\pwsh\setup_vcvars.ps1 vs2013 x64'

.windows_setup_vs2013_x86:
  before_script: &windows_setup_vs2013_x86
    - '&script\pwsh\setup_vcvars.ps1 vs2013 x86'

.windows_build_config:
  script: &windows_build_script_config
    # plot information of project.
    - $ARTIFACTS = (pwd).Path + "\${CI_PROJECT_NAME}-${CI_JOB_NAME}"
    - if (![io.Directory]::Exists("$ARTIFACTS")) { mkdir "$ARTIFACTS" > $null; }
    - 'Write-Output "[Version]" > $ARTIFACTS\version.txt'
    - 'Write-Output "date: $(Get-Date -Format `"yyyy-MM-dd HH:mm:ss z`")" >> $ARTIFACTS/version.txt'
    - 'Write-Output "ref: $CI_COMMIT_REF_NAME" >> $ARTIFACTS/version.txt'
    - 'Write-Output "tag: $CI_COMMIT_TAG" >> $ARTIFACTS/version.txt'
    - 'Write-Output "reversion: $CI_COMMIT_SHA" >> $ARTIFACTS/version.txt'
    - 'Write-Output "[Recent Log]"  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | findstr -v "Merge" | select -first 16 >> $ARTIFACTS/version.txt
    - Get-Content $ARTIFACTS/version.txt
    # start build
    - cmake --version
    - mkdir build > $null
    - pushd build
    - cmake .. -G "NMake Makefiles" -DTS_DYNAMIC_INSTRUCTION=ON -DCMAKE_INSTALL_PREFIX="${ARTIFACTS}" -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --target install
    - popd
    - '&script\pwsh\fusion_v2.ps1 $ARTIFACTS\bin'

.windows_build_cuda_config:
  script: &windows_build_cuda_script_config
    # plot information of project.
    - $ARTIFACTS = (pwd).Path + "\${CI_PROJECT_NAME}-${CI_JOB_NAME}"
    - if (![io.Directory]::Exists("$ARTIFACTS")) { mkdir "$ARTIFACTS" > $null; }
    - 'Write-Output "[Version]" > $ARTIFACTS\version.txt'
    - 'Write-Output "date: $(Get-Date -Format `"yyyy-MM-dd HH:mm:ss z`")" >> $ARTIFACTS/version.txt'
    - 'Write-Output "ref: $CI_COMMIT_REF_NAME" >> $ARTIFACTS/version.txt'
    - 'Write-Output "tag: $CI_COMMIT_TAG" >> $ARTIFACTS/version.txt'
    - 'Write-Output "reversion: $CI_COMMIT_SHA" >> $ARTIFACTS/version.txt'
    - 'Write-Output "[Recent Log]"  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | findstr -v "Merge" | select -first 16 >> $ARTIFACTS/version.txt
    - Get-Content $ARTIFACTS/version.txt
    # start build
    - cmake --version
    - mkdir build > $null
    - pushd build
    - cmake .. -G "NMake Makefiles" -DTS_DYNAMIC_INSTRUCTION=ON -DTS_USE_CUDA=ON -DCMAKE_INSTALL_PREFIX="${ARTIFACTS}" -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --target install
    - popd
    - '&script\pwsh\fusion_v2.ps1 $ARTIFACTS\bin'

  artifacts: &windows_artifacts_config
    <<: *common_artifacts_config


.linux_armv7a_before_script:
  before_script: &linux_armv7a_before_script
    - export DEBIAN_FRONTEND=noninteractive
    - export TZ=Asia/Shanghai
    - sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list
    - (apt update || echo "[WARNNING] Some thing wrong, but ignored!")
    - export ARM_VER=arm
    - export ARM_ABI=gnueabihf
    - apt-get install -y git cmake gcc-$ARM_VER-linux-$ARM_ABI g++-$ARM_VER-linux-$ARM_ABI
    - export TOOLCAHIN=`pwd`/toolchain/$ARM_VER-linux-$ARM_ABI.cmake
    # plot information of project.
    - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date "+%A %Y-%m-%d %H:%M:%S %Z"` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt

.linux_aarch64_before_script:
  before_script: &linux_aarch64_before_script
    - export DEBIAN_FRONTEND=noninteractive
    - export TZ=Asia/Shanghai
    - sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list
    - (apt update || echo "[WARNNING] Some thing wrong, but ignored!")
    - export ARM_VER=aarch64
    - export ARM_ABI=gnu
    - apt-get install -y git cmake gcc-$ARM_VER-linux-$ARM_ABI g++-$ARM_VER-linux-$ARM_ABI
    - export TOOLCAHIN=`pwd`/toolchain/$ARM_VER-linux-$ARM_ABI.cmake
    # plot information of project.
    - export ARTIFACTS=`pwd`/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    - if [ ! -d "$ARTIFACTS" ]; then mkdir "$ARTIFACTS"; fi
    - 'echo [Version] > $ARTIFACTS/version.txt'
    - 'echo date: `date "+%A %Y-%m-%d %H:%M:%S %Z"` >> $ARTIFACTS/version.txt'
    - 'echo ref: $CI_COMMIT_REF_NAME >> $ARTIFACTS/version.txt'
    - 'echo tag: $CI_COMMIT_TAG >> $ARTIFACTS/version.txt'
    - 'echo reversion: $CI_COMMIT_SHA >> $ARTIFACTS/version.txt'
    - 'echo [Recent Log]  >> $ARTIFACTS/version.txt'
    - git log -n 32 --pretty=format:"%h [%ai] %s" | grep -v Merge | head -n 16 >> $ARTIFACTS/version.txt
    - cat $ARTIFACTS/version.txt

.linux_arm_build_config:
  script: &linux_arm_build_config
    - cmake --version
    - mkdir build
    - cd build
    - 'cmake .. -DCMAKE_INSTALL_PREFIX=$ARTIFACTS 
       -DCMAKE_BUILD_TYPE=Release 
       -DCMAKE_TOOLCHAIN_FILE=${TOOLCAHIN}'
    - cmake --build . --target install -- -j $THREADS


.ubuntu1604_image: &ubuntu1604_config
  image: "ubuntu:16.04"
  before_script: *ubuntu_before_script
    
    
.ubuntu1804_image: &ubuntu1804_config
  image: "ubuntu:18.04"
  before_script: *ubuntu_before_script
  
  
.ubuntu2004_image: &ubuntu2004_config
  image: "ubuntu:20.04"
  before_script: *ubuntu_before_script


.ubuntu1604_cuda92_image: &ubuntu1604_cuda92_config
  image: "nvidia/cuda:9.2-devel-ubuntu16.04"
  before_script: *ubuntu_before_script


.ubuntu1604_cuda102_image: &ubuntu1604_cuda102_config
  image: "nvidia/cuda:10.2-devel-ubuntu16.04"
  before_script: *ubuntu_before_script


.ubuntu1604_cuda1131_image: &ubuntu1604_cuda1131_config
  image: "nvidia/cuda:11.3.1-devel-ubuntu16.04"
  before_script: *ubuntu_before_script


.ubuntu1804_cuda1141_image: &ubuntu1804_cuda1141_config
  image: "nvidia/cuda:11.4.1-devel-ubuntu18.04"
  before_script: *ubuntu_before_script


.ubuntu2004_cuda1141_image: &ubuntu2004_cuda1141_config
  image: "nvidia/cuda:11.4.1-devel-ubuntu20.04"
  before_script: *ubuntu_before_script
  
  
.mingw_image: &mingw_config
  image: "ubuntu:20.04"
  before_script: *mingw_before_script


.centos7_image: &centos7_config
  image: "centos:7"
  before_script: *centos7_before_script


.centos8_image: &centos8_config
  image: "centos:8"
  before_script: *centos8_before_script

    
.android_image: &android_config
  image: "ubuntu:20.04"
  before_script: *android_before_script
  
  
ubuntu16.04-amd64:
  <<: *ubuntu1604_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_script_config
  artifacts: *linux_artifacts_config
  
  
ubuntu18.04-amd64:
  <<: *ubuntu1804_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_script_config
  artifacts: *linux_artifacts_config
  
  
ubuntu20.04-amd64:
  <<: *ubuntu2004_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_script_config
  artifacts: *linux_artifacts_config


ubuntu16.04_cuda9.2-amd64:
  <<: *ubuntu1604_cuda92_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_cuda_script_config
  artifacts: *linux_artifacts_config


ubuntu16.04_cuda10.2-amd64:
  <<: *ubuntu1604_cuda102_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_cuda_script_config
  artifacts: *linux_artifacts_config


ubuntu16.04_cuda11.3.1-amd64:
  <<: *ubuntu1604_cuda1131_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_cuda_script_config
  artifacts: *linux_artifacts_config


# Ubuntu18.04 default cmake had conflict with CUDA 10.x
# ubuntu18.04_cuda11.4.1-amd64:
#   <<: *ubuntu1804_cuda1141_config
#   stage: build
#   tags:
#     - docker,amd64,linux
#   only: *only_config
#   script: *linux_build_cuda_script_config
#   artifacts: *linux_artifacts_config


ubuntu20.04_cuda11.4.1-amd64:
  <<: *ubuntu2004_cuda1141_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_cuda_script_config
  artifacts: *linux_artifacts_config


mingw-x86_64:
  <<: *mingw_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *mingw-x86_64_build_script_config
  artifacts: *linux_artifacts_config

  
mingw-i686:
  <<: *mingw_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *mingw-i686_build_script_config
  artifacts: *linux_artifacts_config
  
  
centos7-amd64:
  <<: *centos7_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_script_config
  artifacts: *linux_artifacts_config
  
  
centos8-amd64:
  <<: *centos8_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *linux_build_script_config
  artifacts: *linux_artifacts_config
  
  
android19-arm:
  <<: *android_config
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  script: *android19_build_script_config
  cache: *android_cache_config
  artifacts: *linux_artifacts_config


darwin-amd64:
  stage: build
  tags:
    - shell,amd64,darwin
  only: *only_config
  before_script: *darwin_before_script
  script: *darwin_build_script_config
  artifacts: *linux_artifacts_config


ios9-arm:
  stage: build
  tags:
    - shell,darwin
  only: *only_config
  before_script: *darwin_before_script
  script: *ios9_build_script_config
  artifacts: *linux_artifacts_config

windows_vs2019-x64:
  stage: build
  tags:
    - shell,vs2019,windows
  only: *only_config
  before_script: *windows_setup_vs2019_x64
  script: *windows_build_script_config
  artifacts: *windows_artifacts_config

windows_vs2019-x86:
  stage: build
  tags:
    - shell,vs2019,windows
  only: *only_config
  before_script: *windows_setup_vs2019_x86
  script: *windows_build_script_config
  artifacts: *windows_artifacts_config

windows_vs2019_cuda-x64:
  stage: build
  tags:
    - shell,vs2019,cuda,windows
  only: *only_config
  before_script: *windows_setup_vs2019_x64
  script: *windows_build_cuda_script_config
  artifacts: *windows_artifacts_config


ubuntu16.04-armv7a:
  image: "ubuntu:16.04"
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  before_script: *linux_armv7a_before_script
  script: *linux_arm_build_config
  artifacts: *linux_artifacts_config


ubuntu16.04-aarch64:
  image: "ubuntu:16.04"
  stage: build
  tags:
    - docker,amd64,linux
  only: *only_config
  before_script: *linux_aarch64_before_script
  script: *linux_arm_build_config
  artifacts: *linux_artifacts_config

# mingw-i686_test:
#   image: "ubuntu:20.04"
#   stage: test
#   tags:
#     - docker,amd64,linux
#   only: *only_config
#   script: *linux_test_script_config
#   dependencies:
#     - mingw-i686
  
  